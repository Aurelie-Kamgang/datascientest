pipeline {
    // environment {
    //     IMAGE_NAME = "ic-webapp"
    //     IMAGE_TAG = "1.1"
    //     DOCKERHUB_USERNAME="ulrichsteve"
    //     DOCKERHUB_PASSWORD=credentials('dockerhub_password')
    //     SERVER_IP= '3.80.195.164'
    //     CONTAINER_PORT='8080'
    //     SERVER_PORT='8081'

    // }
    agent any
    stages {
    //     stage('build') {
    //         agent any 
    //         steps {
    //             script {
    //                 sh '''
    //                     docker build --no-cache -f docker/Dockerfile -t $DOCKERHUB_USERNAME/$IMAGE_NAME:$IMAGE_TAG ./docker
    //                 '''
    //             }
    //         }
    //     }
    //     stage('run container') {
    //         agent any 
    //         steps {
    //             script {
    //                 sh '''
    //                     docker run --rm -dp  $SERVER_PORT:$CONTAINER_PORT --name $IMAGE_NAME $DOCKERHUB_USERNAME/$IMAGE_NAME:$IMAGE_TAG
    //                     sleep 5
    //                 '''
    //             }
    //         }
    //     }
    //     stage('test container') {
    //         agent any 
    //         steps {
    //             script {
    //                 sh '''
    //                     curl -I http://$SERVER_IP:$SERVER_PORT | grep -i "200"
    //                 '''
    //             }
    //         }
    //     }
    //     stage('stop and push') {
    //         agent any 
    //         steps {
    //             script {
    //                 sh '''
    //                     docker stop $IMAGE_NAME
    //                     echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
    //                     docker push $DOCKERHUB_USERNAME/$IMAGE_NAME:$IMAGE_TAG
    //                 '''
    //             }
    //         }
    //     }
        stage('build ec2') {
            agent {
                docker {
                    image 'jenkins/jnlp-agent-terraform'
                }
            } 
            environment{
                AWS_ACCESS_KEY_ID=credentials('aws_access_key_id')
                AWS_SECRET_ACCESS_KEY=('aws_secret_access_key')
            }
            steps {
                script {
                    sh '''
                    mkdir -p  ~/.aws
                    echo "[default]" > ~/.aws/credentials
                    echo -e "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
                    echo -e "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
                    chmod 400 ~/.aws/credentials
                    cd "./terraform"
                    terraform init
                    terraform plan
                    terraform apply -auto-approve
                    '''
                }
            }
        }
        //   stage {
        //     agent any 
        //     steps {
        //         script {
        //             sh '''
        //             '''
        //         }
        //     }
        // }
    }
    // post {
    //     always {
    //         script {
    //             sh '''
    //             '''
    //         }
    //     }
    // }
}